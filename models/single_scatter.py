import numpy as np
import pandas as pd
import os


class SingleScatteringSimulation:
    """
    The `SingleScatteringSimulation` class simulates scattering events in a stellar
    environment characterized by a variety of phase functions, albedos, and angles.
    The simulation uses Henyey-Greenstein phase function to compute light scattering.

    Parameters:
    ----
    path_to_flux_data_file : str
        The filepath to the CSV file containing stellar flux data.
    path_to_dust_density_file : str
        The filepath to the file containing dust density data.
    path_to_save_scattered_flux_array_file : str
        The filepath to save the scattered flux array generated by the simulate() method.
    wavelengths : list or np.ndarray
        The list or array of wavelengths (in meters) to be considered in the simulation.
    sigma_at_wavelength : list or np.ndarray
        The list or array of cross-section values (in square meters) at corresponding wavelengths.
    nangle : int
        The number of angles (in radians) to be used in the simulation.
    nalbedo : int
        The number of different albedo values to be considered in the simulation.
    nphase : int
        The number of different phase function values to be considered in the simulation.
    verbose : bool, optional
        If set to True, the simulation will print detailed information during execution.
    """

    def __init__(
        self,
        path_to_flux_data_file: str,
        path_to_dust_density_file: str,
        path_to_save_scattered_flux_array_file: str,
        wavelengths: list | np.ndarray,
        sigma_at_wavelength: list | np.ndarray,
        nangle: int,
        nalbedo: int,
        nphase: int,
        verbose: bool = False,
    ):
        self.path_to_flux_data_file = path_to_flux_data_file
        self.path_to_dust_density_file = path_to_dust_density_file
        self.path_to_save_scattered_flux_array_file = (
            path_to_save_scattered_flux_array_file
        )
        self.wavelengths = wavelengths
        self.sigma_at_wavelength = sigma_at_wavelength

        self.flux_data = pd.read_csv(self.path_to_flux_data_file)
        self.n_stars = len(self.flux_data)

        self.dust_density_file = np.loadtxt(self.path_to_dust_density_file)
        self.distance = self.dust_density_file.transpose()[0]
        self.dust = self.dust_density_file.transpose()[1]

        self.dsun = np.linspace(0, 2000, 99)

        self.nangle = nangle
        self.nwave = len(self.wavelengths)
        self.nalbedo = nalbedo
        self.nphase = nphase

        self.verbose = verbose

        self.angle = np.arange(self.nangle) * 0.1

        self.flux = np.zeros((self.nwave, self.nangle, self.nalbedo, self.nphase))

    def henyey_greenstrein(self, albedo: float, phase: float, angle: float):
        """
        Compute the Henyey-Greenstein phase function, which describes the distribution
        of light scattered in a particular direction.

        Parameters:
        ----
        albedo : float
            The albedo of the particles. Ranges between 0 (no reflectivity)
            and 1 (total reflectivity).
        phase : float
            The phase function 'g' value, which describes the directional distribution of scattered light. Ranges from 0 (isotropic scatterig)
            to 1 (complete forward scatterig).
        angle : float
            The scattering angle, in radians.

        Returns:
        ----
        float
            The calculated Henyey-Greenstein phase function value.
        """
        return (albedo / (4 * np.pi)) * (
            (1 - (phase**2))
            / (1 + (phase**2) - (2 * phase * np.cos(angle))) ** (3 / 2)
        )

    def single_scatter(
        self,
        dust: list | np.ndarray,
        dsun: np.ndarray,
        dstar: float,
        sflux: float,
        sigma: float,
        albedo: float,
        phase: float,
        angle: float,
    ) -> float:
        """
        Perform a single scattering simulation. This simulates the scattering of light from
        a star off of a dust particle and calculates the flux as a result of this event.

        Parameters:
        ----
        dust : list or np.ndarray
            The dust density values along the line of sight.
        dsun : np.ndarray
            The distances from the sun for each dust density value.
        dstar : float
            The distance to the star.
        sflux : float
            The stellar flux value.
        sigma : float
            The cross-section value at the given wavelength.
        albedo : float
            The albedo, or scattering coefficient, of the particles.
        phase : float
            The phase function, which describes the directional distribution of scattered light.
        angle : float
            The scattering angle, in radians.

        Returns:
        ----
        float
            The calculated flux resulting from the scattering events.
        """
        radeg = 57.2958
        delta_dist = dsun[1] - dsun[0]
        min_dist = np.sin(angle / radeg) * dstar
        dist = np.sqrt((dsun - dstar * np.cos(angle / radeg)) ** 2 + min_dist**2)
        dangle = np.arcsin(min_dist / dist)
        minpos = np.argmin(dist)  # minpos - index of min value of dist
        if minpos > len(dangle):
            dangle[minpos + 1 :] = np.pi - np.asin(min_dist / dist[minpos + 1 :])

        # Henyey - Greenstein Phase Function

        sca = (albedo / (4 * np.pi)) * (
            (1 - (phase**2))
            / (1 + (phase**2) - (2 * phase * np.cos(dangle))) ** (3 / 2)
        )

        flux = sflux / 4.0 / np.pi / dist**2 * dust * sigma * sca * delta_dist

        nflux = len(flux)
        for i in range(nflux):
            flux[i] = flux[i] * np.exp(-sigma * np.sum(dust[0:i]) * delta_dist)

        return flux

    def simulate(self):
        """
        Perform the single scattering simulation for all stars in the input file and for all
        wavelengths, angles, albedos, and phase functions. The resulting flux arrays are saved
        to .npy files.
        """
        for i in range(self.n_stars):
            self.flux = np.zeros((self.nwave, self.nangle, self.nalbedo, self.nphase))

            star = self.flux_data.loc[i, "Star"]
            if self.verbose:
                print(f"Star: {star}")

            dstar = self.flux_data.loc[i, "Distance(pc)"]
            sflux = self.flux_data.filter(regex=("Flux.*")).loc[i, :].values

            for iwave in range(self.nwave):
                if self.verbose:
                    print(f"-- Wavelength: {self.wavelengths[iwave]}")
                for ialbedo in range(self.nalbedo):
                    albedo = float(ialbedo) / 10.0
                    for iphase in range(self.nphase):
                        phase = float(iphase) / 10.0
                        for iangle in range(self.nangle):
                            self.flux[iwave, iangle, ialbedo, iphase] = np.sum(
                                self.single_scatter(
                                    self.dust,
                                    self.dsun,
                                    dstar,
                                    sflux[iwave],
                                    self.sigma_at_wavelength[iwave],
                                    albedo,
                                    phase,
                                    self.angle[iangle],
                                )
                            )

            if self.verbose:
                print(f"Size of Flux: {self.flux.shape}")
            np.save(
                os.path.join(
                    self.path_to_save_scattered_flux_array_file, f"{star}.npy"
                ),
                self.flux,
            )


if __name__ == "__main__":
    from dotenv import load_dotenv

    load_dotenv()
    DATA = os.environ.get("DATA")

    path_to_flux_data_file = os.path.join(DATA, "processed", "flux_data.csv")
    path_to_dust_density_file = os.path.join(
        DATA, "processed", "green-dust-density-2000pc.txt"
    )
    path_to_save_scattered_flux_array_file = (
        os.path.join(DATA, "processed", "single_scatter_model"),
    )
    wavelengths = [1100, 1500, 2300]
    sigma_at_wavelength = np.array([1.840, 1.275, 1.439])  # Extinction Cross Section
    sigma_at_wavelength *= 1e-21
    sigma_at_wavelength = sigma_at_wavelength * 3.08e18
    nangle = 100
    nalbedo = 10
    nphase = 10

    single_scatter_object = SingleScatteringSimulation(
        path_to_flux_data_file,
        path_to_dust_density_file,
        path_to_save_scattered_flux_array_file,
        wavelengths,
        sigma_at_wavelength,
        nangle,
        nalbedo,
        nphase,
        verbose=True,
    )

    single_scatter_object.simulate()
